on:
  push:
    branches:
      - dev
      - master

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - run: dotnet restore
      - run: dotnet build --no-restore
      - run: dotnet test --no-build --no-restore --filter Category=SanityTest --verbosity normal -l:"trx;LogFileName=TestResults.xml"

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test results
          path:  '**/TestResults/*.xml'
          reporter: dotnet-trx

      - name: Extract Test Counts
        id: test_counts
        run: |
          passed=$(jq '.summary.counters.passed' **/TestResults.json)
          failed=$(jq '.summary.counters.failed' **/TestResults.json)
          skipped=$(jq '.summary.counters.skipped' **/TestResults.json)
          echo "::set-output name=passed::$passed"
          echo "::set-output name=failed::$failed"
          echo "::set-output name=skipped::$skipped"`

      - name: Update Gist
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GIST_TOKEN}}
          script: |
            const fs = require('fs');
            const passed = "${{ steps.test_counts.outputs.passed }}";
            const failed = "${{ steps.test_counts.outputs.failed }}";
            const skipped = "${{ steps.test_counts.outputs.skipped }}";
            const gistId = "59e13bd3823d754542ac98d24b3329b4";
            const filename = "test-results.json";
            const content = `{"schemaVersion":1,"label":"tests","message":"${passed} passed, ${failed} failed, ${skipped} skipped","color":"brightgreen"}`;
            
            let gist;
            try {
              gist = await github.gists.get({ gist_id: gistId });
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            await github.gists.update({
              gist_id: gistId,
              files: {
                [filename]: { content }
              }
            });